install.packages(c("anytime", "tidyverse"))
x<-repeat(1,3)
x
x<-seq(1,3)
x
rep(1, 3)
x1<-rep(1, 3)
x2<-rep(.5, 9)
x3<-rep(.3,3)
x1+x2+x3
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.5, 3)
x2<-rep(.3, 9)
x3<-rep(.2,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.3, 3)
x2<-rep(.2, 9)
x3<-rep(.1,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.2, 3)
x2<-rep(.1, 9)
x3<-rep(.05,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.1, 9)
x3<-rep(.05,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.05, 9)
x3<-rep(.05,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.05, 9)
x3<-rep(.025,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.05, 9)
x3<-rep(.03,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.05, 9)
x3<-rep(.033,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.1, 9)
x3<-rep(.05,3)
sum(x1)+sum(x2)+sum(x3)
x1
x2
x3
library(tidyverse)
library(survival)
library(survminer)
data("lung")
head(lung)
exp(1.5178)
exp(0.4626)
exp(2.5730)
install.packages("FaultTree")
devtools::install_github("CarlesCG/FaultTree")
library(devtools)
install.packages("FaultTree", repos="http://R-Forge.R-project.org")
library(FaultTree)
?FaultTree
nasa1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
nasa1<-addLogic(nasa1, at=1, type="or", name="no flow")
nasa1<-addProbability(nasa1, at=1, prob=0.1, name="Component B")
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
nasa1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
nasa1<-addLogic(nasa1, at=1, type="or", name="no flow")
nasa1<-addProbability(nasa1, at=1, prob=0.003, name="Component B")
nasa1<-addProbability(nasa1, at=2, prob=0.01, name="No Flow", name2="From Source")
nasa1<-addProbability(nasa1, at=2, prob=0.1, name="Component A", name2="blocks flow")
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
arm1<-ftree.make(type="or", name="Warhead Armed", name2="Inadvertently")
arm1<-addLogic(arm1, at= 1 , type="and", name="Arm Circuit", name2="Relays Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10, tag="E1", name="Relay 1", name2="Fails Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10, tag="E2", name="Relay 1", name2="Fails Closed")
arm1<-addLogic(arm1, at= 1, type="inhibit", name="Arm Power", name2="Is Present")
arm1<-addProbability(arm1, at= 5, prob=1, tag="W1", name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E3", name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E4", name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Warhead Armed", name2="Inadvertently")
arm1<-addLogic(arm1, at= 1 , type="and", name="Arm Circuit", name2="Relays Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="Relay 1", name2="Fails Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="Relay 1", name2="Fails Closed")
arm1<-addLogic(arm1, at= 1, type="inhibit", name="Arm Power", name2="Is Present")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E3", name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E4", name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="nozzle split")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addProbability(arm1, at= 2, prob=0.001,  name="nozzle split")
arm1<-addProbability(arm1, at= 2, prob=0.01,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addProbability(arm1, at= 2, prob=0.0013,  name="nozzle split")
arm1<-addProbability(arm1, at= 2, prob=0.015,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=.0021, name="Leaked")
arm1<-addLogic(arm1, at= 5, type="or", name="Used")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 1")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 2")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
nasa1<-ftree.calc(arm1)
nasa1
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
ftree2html(nasa1)
Hikma<-ftree.make(type="or", name="Hikma device fails", name2="to deliver rx")
Hikma<-addLogic(Hikma, at= 1 , type="and", name="Clogged")
Hikma<-addProbability(Hikma, at= 2, prob=0.0013,  name="nozzle split")
Hikma<-addProbability(Hikma, at= 2, prob=0.015,  name="object blocks")
Hikma<-addLogic(Hikma, at= 1, type="and", name="Empty")
Hikma<-addProbability(Hikma, at= 5, prob=.0021, name="Leaked")
Hikma<-addLogic(Hikma, at= 5, type="or", name="Used")
Hikma<-addExposed(Hikma, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 1")
Hikma<-addExposed(Hikma, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 2")
ftree2html(Hikma, write_file=TRUE)
browseURL("Hikma.html")
Hikma2<-ftree.calc(Hikma)
ftree2html(Hikma2, write_file=TRUE)
browseURL("Hikma2.html")
C=0.95
R=0.95
N = ln(1-C)/ln( R)
C=0.95
R=0.95
N = log(1-C)/ln( R)
N = log(1-C)/log( R)
N
N = ceiling(log(1-C)/log( R))
N
C<- seq(0,1,by=0.1)
C
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(N~R)
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = log(1-C)/log( R)
plot(N~R)
C <- 0.99
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(N~R)
C1 <- 0.99
C2 <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N1 = ceiling(log(1-C1)/log( R))
N2 = ceiling(log(1-C2)/log( R))
plot(N1,R)
C1 <- 0.99
C2 <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N1 = ceiling(log(1-C1)/log( R))
N2 = ceiling(log(1-C2)/log( R))
plot(R,N1)
lines(R,N2)
plot(R,N1, type="l", col = "blue")
lines(R,N2, col="red")
abline(v=0.95)
ceiling(log(1.99)/log( .99))
ceiling(log(.99)/log( .99))
ceiling(log(1-.99)/log( .99))
ceiling(log(1-.95)/log( .99))
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(R,N1, type="l", col = "blue")
lines(R,N2, col="red")
abline(v=0.95)
abline(v=0.99)
plot(R,N, type="l", col = "blue")
abline(v=0.95)
abline(v=0.99)
library(tidyverse)
library(dplyr)
library(leaflet)
library(leaflet.extras)
library(htmlwidgets)
library(gstat)
library(sp)
#library(maptools)
#MAC AW
#setwd("/Users/andywilson1/Documents/GitHub/Olivia-DIA")
#PC AW
setwd("C:/Users/wilso/Documents/GitHub/Olivia-DIA")
## Centralizing in Washington state (square boundaries)
## Note: it is possible to create grids with irregular boundaries, but this is close enough for Wash. state
lat_min = 45.54354
lat_max = 49.00249
lon_max = -116.91599
lon_min = -124.73317
## Import positivity data
prev <- read.csv(file = "External data/ZIP3_XY_HPV_SCREEN_2019_SLIM.csv", na.strings = c("", "NA"))
qpal <- colorQuantile("Reds", prev$positivity, n = 5)
S <- leaflet(states, options = leafletOptions(dragging=TRUE,
minZoom=4,
maxZoom=11))%>%
setView(-98.35, 39.5, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
SS <- S %>% addPolygons(data = states, weight=.5) %>%
addCircleMarkers(lng = prev$Longitude_avg,
lat = prev$Latitude_avg,
label = prev$positivity,
popup = paste("<b>","Positivity =", prev$positivity,"</b>"),
radius = log(prev$n_screened),
stroke = TRUE, fillOpacity = 0.8,
color = qpal(prev$positivity)
)
SSS <- SS %>% addResetMapButton() %>%
addLegend(title = "Positivity quantile (relative standing)",
position = "bottomleft",
pal=qpal,
values = prev$positivity)
SSS
states <- geojsonio::geojson_read("us_state_polygons.json", what = "sp")
counties<- geojsonio::geojson_read("us_county_polygons.json", what = "sp")
qpal <- colorQuantile("Reds", prev$positivity, n = 5)
S <- leaflet(states, options = leafletOptions(dragging=TRUE,
minZoom=4,
maxZoom=11))%>%
setView(-98.35, 39.5, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
SS <- S %>% addPolygons(data = states, weight=.5, label = state$STATE) %>%
addCircleMarkers(lng = prev$Longitude_avg,
lat = prev$Latitude_avg,
label = prev$positivity,
popup = paste("<b>","Positivity =", prev$positivity,"</b>"),
radius = log(prev$n_screened),
stroke = TRUE, fillOpacity = 0.8,
color = qpal(prev$positivity)
)
SSS <- SS %>% addResetMapButton() %>%
addLegend(title = "Positivity quantile (relative standing)",
position = "bottomleft",
pal=qpal,
values = prev$positivity)
SSS
S <- leaflet(states, options = leafletOptions(dragging=TRUE,
minZoom=4,
maxZoom=11))%>%
setView(-98.35, 39.5, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
SS <- S %>% addPolygons(data = states, weight=.5, label = states$STATE) %>%
addCircleMarkers(lng = prev$Longitude_avg,
lat = prev$Latitude_avg,
label = prev$positivity,
popup = paste("<b>","Positivity =", prev$positivity,"</b>"),
radius = log(prev$n_screened),
stroke = TRUE, fillOpacity = 0.8,
color = qpal(prev$positivity)
)
SSS <- SS %>% addResetMapButton() %>%
addLegend(title = "Positivity quantile (relative standing)",
position = "bottomleft",
pal=qpal,
values = prev$positivity)
SSS
SS <- S %>% addPolygons(data = states, weight=.5, label = states$NAME) %>%
addCircleMarkers(lng = prev$Longitude_avg,
lat = prev$Latitude_avg,
label = prev$positivity,
popup = paste("<b>","Positivity =", prev$positivity,"</b>"),
radius = log(prev$n_screened),
stroke = TRUE, fillOpacity = 0.8,
color = qpal(prev$positivity)
)
SSS <- SS %>% addResetMapButton() %>%
addLegend(title = "Positivity quantile (relative standing)",
position = "bottomleft",
pal=qpal,
values = prev$positivity)
SSS
saveWidget(SSS, file = "C:/Users/wilso/Documents/GitHub/Olivia-DIA/Output/Prototype US positivity quantiles map v1.1.html")
