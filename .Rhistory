x2<-rep(.05, 9)
x3<-rep(.03,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.05, 9)
x3<-rep(.033,3)
sum(x1)+sum(x2)+sum(x3)
x1<-rep(.15, 3)
x2<-rep(.1, 9)
x3<-rep(.05,3)
sum(x1)+sum(x2)+sum(x3)
x1
x2
x3
library(tidyverse)
library(survival)
library(survminer)
data("lung")
head(lung)
exp(1.5178)
exp(0.4626)
exp(2.5730)
install.packages("FaultTree")
devtools::install_github("CarlesCG/FaultTree")
library(devtools)
install.packages("FaultTree", repos="http://R-Forge.R-project.org")
library(FaultTree)
?FaultTree
nasa1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
nasa1<-addLogic(nasa1, at=1, type="or", name="no flow")
nasa1<-addProbability(nasa1, at=1, prob=0.1, name="Component B")
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
nasa1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
nasa1<-addLogic(nasa1, at=1, type="or", name="no flow")
nasa1<-addProbability(nasa1, at=1, prob=0.003, name="Component B")
nasa1<-addProbability(nasa1, at=2, prob=0.01, name="No Flow", name2="From Source")
nasa1<-addProbability(nasa1, at=2, prob=0.1, name="Component A", name2="blocks flow")
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
arm1<-ftree.make(type="or", name="Warhead Armed", name2="Inadvertently")
arm1<-addLogic(arm1, at= 1 , type="and", name="Arm Circuit", name2="Relays Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10, tag="E1", name="Relay 1", name2="Fails Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10, tag="E2", name="Relay 1", name2="Fails Closed")
arm1<-addLogic(arm1, at= 1, type="inhibit", name="Arm Power", name2="Is Present")
arm1<-addProbability(arm1, at= 5, prob=1, tag="W1", name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E3", name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E4", name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Warhead Armed", name2="Inadvertently")
arm1<-addLogic(arm1, at= 1 , type="and", name="Arm Circuit", name2="Relays Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="Relay 1", name2="Fails Closed")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="Relay 1", name2="Fails Closed")
arm1<-addLogic(arm1, at= 1, type="inhibit", name="Arm Power", name2="Is Present")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E3", name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10, tag="E4", name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="nozzle split")
arm1<-addExposed(arm1, at= 2, mttf=1/1.1e-6, exposure=10,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addProbability(arm1, at= 2, prob=0.001,  name="nozzle split")
arm1<-addProbability(arm1, at= 2, prob=0.01,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=1, name="Battery Power", name2="Is Available")
arm1<-addLogic(arm1, at= 5, type="or", name="Arm Circuit Closed", name2="By Computer")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="CPU", name2="Failure")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Software", name2="Failure")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
arm1<-ftree.make(type="or", name="Device fails", name2="to deliver rx")
arm1<-addLogic(arm1, at= 1 , type="and", name="Clogged")
arm1<-addProbability(arm1, at= 2, prob=0.0013,  name="nozzle split")
arm1<-addProbability(arm1, at= 2, prob=0.015,  name="object blocks")
arm1<-addLogic(arm1, at= 1, type="and", name="Empty")
arm1<-addProbability(arm1, at= 5, prob=.0021, name="Leaked")
arm1<-addLogic(arm1, at= 5, type="or", name="Used")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 1")
arm1<-addExposed(arm1, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 2")
ftree2html(arm1, write_file=TRUE)
browseURL("arm1.html")
nasa1<-ftree.calc(arm1)
nasa1
ftree2html(nasa1, write_file=TRUE)
browseURL("nasa1.html")
ftree2html(nasa1)
Hikma<-ftree.make(type="or", name="Hikma device fails", name2="to deliver rx")
Hikma<-addLogic(Hikma, at= 1 , type="and", name="Clogged")
Hikma<-addProbability(Hikma, at= 2, prob=0.0013,  name="nozzle split")
Hikma<-addProbability(Hikma, at= 2, prob=0.015,  name="object blocks")
Hikma<-addLogic(Hikma, at= 1, type="and", name="Empty")
Hikma<-addProbability(Hikma, at= 5, prob=.0021, name="Leaked")
Hikma<-addLogic(Hikma, at= 5, type="or", name="Used")
Hikma<-addExposed(Hikma, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 1")
Hikma<-addExposed(Hikma, at= 7, mttf=1/1.1e-6, exposure=10,  name="Used 2")
ftree2html(Hikma, write_file=TRUE)
browseURL("Hikma.html")
Hikma2<-ftree.calc(Hikma)
ftree2html(Hikma2, write_file=TRUE)
browseURL("Hikma2.html")
C=0.95
R=0.95
N = ln(1-C)/ln( R)
C=0.95
R=0.95
N = log(1-C)/ln( R)
N = log(1-C)/log( R)
N
N = ceiling(log(1-C)/log( R))
N
C<- seq(0,1,by=0.1)
C
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(N~R)
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = log(1-C)/log( R)
plot(N~R)
C <- 0.99
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(N~R)
C1 <- 0.99
C2 <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N1 = ceiling(log(1-C1)/log( R))
N2 = ceiling(log(1-C2)/log( R))
plot(N1,R)
C1 <- 0.99
C2 <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N1 = ceiling(log(1-C1)/log( R))
N2 = ceiling(log(1-C2)/log( R))
plot(R,N1)
lines(R,N2)
plot(R,N1, type="l", col = "blue")
lines(R,N2, col="red")
abline(v=0.95)
ceiling(log(1.99)/log( .99))
ceiling(log(.99)/log( .99))
ceiling(log(1-.99)/log( .99))
ceiling(log(1-.95)/log( .99))
C <- 0.95
R <- seq(0,1,by=0.01)
#R = Reliability (or probability of success)
#C = confidence level
N = ceiling(log(1-C)/log( R))
plot(R,N1, type="l", col = "blue")
lines(R,N2, col="red")
abline(v=0.95)
abline(v=0.99)
plot(R,N, type="l", col = "blue")
abline(v=0.95)
abline(v=0.99)
library(tidyverse)
library(dplyr)
library(leaflet)
library(leaflet.extras)
library(htmlwidgets)
library(gstat)
library(sp)
setwd("C:/Users/wilso/Documents/GitHub/Olivia-DIA")
## Centralizing in Washington state (square boundaries)
## Note: it is possible to create grids with irregular boundaries, but this is close enough for Wash. state
bbox(mydf)
lat_min = 45.54354
lat_max = 49.00249
lon_max = -116.91599
lon_min = -124.73317
## Import positivity data
prev <- read.csv(file = "External data/ZIP3_XY_HPV_SCREEN_2019_SLIM.csv", na.strings = c("", "NA"))
## Restrict to Washington state
Wash_prev <- prev %>%
filter(Longitude_avg >=  lon_min) %>%
filter(Longitude_avg <=  lon_max) %>%
filter(Latitude_avg  >=  lat_min) %>%
filter(Latitude_avg  <=  lat_max) %>%
filter(zip3 != "971")
summary(Wash_prev)
#get the list of states from us_state_polygons.json
states <- geojsonio::geojson_read("us_state_polygons.json", what = "sp")
counties<- geojsonio::geojson_read("us_county_polygons.json", what = "sp")
# Maps of the US (State level)
# Maps of Washington state (County level)
Washington <- subset(counties, STATE == "53")
## HPV vaccination coverage in 2018
WV2018<- read.csv(file = "HPV Data/HPV vaccine/Washington_2018_analysis.csv", na.strings = c("", "NA"), fileEncoding="UTF-8-BOM")
WV2018 <- WV2018 %>%
rename(NAME = Geography)
mydf<- sp::merge(Washington, WV2018 , by="NAME", all=T)
pdf(file = "Output/Washington bounding box for Kriging.pdf")
plot(mydf, col="lightblue", lwd=2, main = "Washington State (US)
grid for Kriging")
abline(h=c(lat_max, lat_min), lty=2, lwd=3, col="blue")
abline(v=c(lon_max, lon_min), lty=2, lwd=3, col="blue")
dev.off()
Percent_uninsured_from_census<- read.csv(file = "Percent_uninsured_from_census.csv", na.strings = c("", "NA"))
head(Percent_uninsured_from_census)
Percent_uninsured <- Percent_uninsured_from_census %>%
filter(state=="53")
Percent_uninsured$NAME <- gsub(" County, WA" , "", Percent_uninsured$NAME)
Percent_uninsured$PCTUI_PTnum <- as.numeric(as.character(Percent_uninsured$PCTUI_PT))
mydf2 <- sp::merge(Washington, Percent_uninsured , by ="NAME",  all=T)
## Income data 2017
library(readxl)
ZipCodeSourceFile = "http://download.geonames.org/export/zip/US.zip"
temp <- tempfile()
download.file(ZipCodeSourceFile , temp)
ZipCodes <- read.table(unz(temp, "US.txt"), sep="\t")
unlink(temp)
names(ZipCodes) = c("CountryCode", "zip", "PlaceName",
"AdminName1", "AdminCode1", "AdminName2", "AdminCode2",
"AdminName3", "AdminCode3", "latitude", "longitude", "accuracy")
head(ZipCodes)
ZipCodes <- ZipCodes %>%
filter(AdminName1=="Washington")
WashIRS <- read_excel("IRS Income Data/DIA Submission Income Data 2017.xlsx")
WashIRS <- WashIRS %>%
filter(STATE=="WA") %>%
rename(zip = 'ZIP CODE')
table(WashIRS$STATE)
head(ZipCodes)
head(WashIRS)
myWashIRS <- merge(ZipCodes, WashIRS, by="zip", all=T)
#Rename Adjusted income:
myWashIRS$AdjInc <- myWashIRS$`AVG ADJUSTED GROSS INCOME (IN THOUSANDS OF DOLLARS)`
myWashIRS <- myWashIRS %>%
drop_na(AdjInc)
summary(myWashIRS$AdjInc)
m <- leaflet(mydf, options = leafletOptions(dragging=TRUE,
minZoom=6,
maxZoom=11))%>%
setView(-120.74, 47.75, 7) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
#Palettes:
pal  <- colorNumeric(palette = "RdYlBu", domain =c(0:45))
pal2 <- colorNumeric(palette = "RdYlBu", domain =c(0:140), reverse = TRUE)
pal3 <- colorNumeric(palette = "RdYlBu", domain =c(0:15), reverse = TRUE)
pal4 <- colorNumeric(palette = "Blues", domain =c(1:50))
MM <- m %>% addPolygons(data = mydf, weight=1, fillOpacity = 0.45,
color = pal(mydf$All),
label = mydf$NAME,
popup = paste0("Percent HPV vaccine UtD: ",
mydf$All, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County HPV vaccination") %>%
addPolygons(data = mydf2, weight=1, fillOpacity = 0.45,
color = pal3(Percent_uninsured$PCTUI_PTnum),
label = mydf2$NAME,
popup = paste0("Percent Uninsured: ",
Percent_uninsured$PCTUI_PTnum, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County Uninsured") %>%
addCircleMarkers(lng = myWashIRS$longitude,
lat = myWashIRS$latitude,
label = myWashIRS$PlaceName, symbols='square',
popup = paste("<b>", myWashIRS$PlaceName,"</b>",
"<br/>",
" AVG ADJUSTED GROSS INCOME (IN THOUSANDS OF DOLLARS)     = $", round(myWashIRS$AdjInc,2),
"<br/>",
"zip = ", myWashIRS$zip),
radius = myWashIRS$AdjInc/10,
stroke = TRUE, fillOpacity = 0.8,
color = pal2(myWashIRS$AdjInc),
group = "IRS tax data by zip",
clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(lng = Wash_prev$Longitude_avg,
lat = Wash_prev$Latitude_avg,
label = Wash_prev$zip3,
popup = paste("<b>", Wash_prev$zip3,"</b>",
"<br/>",
" Positivity rate: ", round(Wash_prev$positivity,2), "%",
"<br/>",
"n screened = ", Wash_prev$n_screened,
"<br/>",
"n positive = ", Wash_prev$n_positive
),
radius = log(Wash_prev$n_positive),
stroke = TRUE, fillOpacity = 0.8,
color = pal4(Wash_prev$positivity),
group = "Positivity by 3-digit zip") %>%
addLayersControl(overlayGroups = c("County HPV vaccination", "IRS tax data by zip", "County Uninsured", "Positivity by 3-digit zip"))
MMM <- MM %>% addResetMapButton() %>%
addLegend(title = "Vaccination rates",
position = "bottomleft",
pal=pal,
values = c(0:45)) %>%
addLegend(title = "Avg annual income (in $1,000s)",
position = "bottomright",
pal=pal2,
values = c(0:150))%>%
addLegend(title = "Percent uninsured",
position = "topleft",
pal=pal3,
values = c(0:15)) %>%
addLegend(title = "Positivity rate",
position = "topright",
pal=pal4,
values = c(0:50))
MMM
MM <- m %>% addPolygons(data = mydf, weight=1, fillOpacity = 0.45,
color = pal(mydf$All),
label = mydf$NAME,
popup = paste0("Percent HPV vaccine UtD: ",
mydf$All, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County HPV vaccination") %>%
addPolygons(data = mydf2, weight=1, fillOpacity = 0.45,
color = pal3(Percent_uninsured$PCTUI_PTnum),
label = mydf2$NAME,
popup = paste0("Percent Uninsured: ",
Percent_uninsured$PCTUI_PTnum, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County Uninsured") %>%
addCircleMarkers(lng = myWashIRS$longitude,
lat = myWashIRS$latitude,
label = myWashIRS$PlaceName,
popup = paste("<b>", myWashIRS$PlaceName,"</b>",
"<br/>",
" AVG ADJUSTED GROSS INCOME (IN THOUSANDS OF DOLLARS)     = $", round(myWashIRS$AdjInc,2),
"<br/>",
"zip = ", myWashIRS$zip),
radius = myWashIRS$AdjInc/10,
stroke = TRUE, fillOpacity = 0.8,
color = pal2(myWashIRS$AdjInc),
group = "IRS tax data by zip",
clusterOptions = markerClusterOptions()) %>%
add_markers(lng = Wash_prev$Longitude_avg,
lat = Wash_prev$Latitude_avg,
label = Wash_prev$zip3, symbols="square",
popup = paste("<b>", Wash_prev$zip3,"</b>",
"<br/>",
" Positivity rate: ", round(Wash_prev$positivity,2), "%",
"<br/>",
"n screened = ", Wash_prev$n_screened,
"<br/>",
"n positive = ", Wash_prev$n_positive
),
radius = log(Wash_prev$n_positive),
stroke = TRUE, fillOpacity = 0.8,
color = pal4(Wash_prev$positivity),
group = "Positivity by 3-digit zip") %>%
addLayersControl(overlayGroups = c("County HPV vaccination", "IRS tax data by zip", "County Uninsured", "Positivity by 3-digit zip"))
MMM <- MM %>% addResetMapButton() %>%
addLegend(title = "Vaccination rates",
position = "bottomleft",
pal=pal,
values = c(0:45)) %>%
addLegend(title = "Avg annual income (in $1,000s)",
position = "bottomright",
pal=pal2,
values = c(0:150))%>%
addLegend(title = "Percent uninsured",
position = "topleft",
pal=pal3,
values = c(0:15)) %>%
addLegend(title = "Positivity rate",
position = "topright",
pal=pal4,
values = c(0:50))
MMM
require(plotly)
MM <- m %>% addPolygons(data = mydf, weight=1, fillOpacity = 0.45,
color = pal(mydf$All),
label = mydf$NAME,
popup = paste0("Percent HPV vaccine UtD: ",
mydf$All, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County HPV vaccination") %>%
addPolygons(data = mydf2, weight=1, fillOpacity = 0.45,
color = pal3(Percent_uninsured$PCTUI_PTnum),
label = mydf2$NAME,
popup = paste0("Percent Uninsured: ",
Percent_uninsured$PCTUI_PTnum, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County Uninsured") %>%
addCircleMarkers(lng = myWashIRS$longitude,
lat = myWashIRS$latitude,
label = myWashIRS$PlaceName,
popup = paste("<b>", myWashIRS$PlaceName,"</b>",
"<br/>",
" AVG ADJUSTED GROSS INCOME (IN THOUSANDS OF DOLLARS)     = $", round(myWashIRS$AdjInc,2),
"<br/>",
"zip = ", myWashIRS$zip),
radius = myWashIRS$AdjInc/10,
stroke = TRUE, fillOpacity = 0.8,
color = pal2(myWashIRS$AdjInc),
group = "IRS tax data by zip",
clusterOptions = markerClusterOptions()) %>%
add_markers(lng = Wash_prev$Longitude_avg,
lat = Wash_prev$Latitude_avg,
label = Wash_prev$zip3, symbols="square",
popup = paste("<b>", Wash_prev$zip3,"</b>",
"<br/>",
" Positivity rate: ", round(Wash_prev$positivity,2), "%",
"<br/>",
"n screened = ", Wash_prev$n_screened,
"<br/>",
"n positive = ", Wash_prev$n_positive
),
radius = log(Wash_prev$n_positive),
stroke = TRUE, fillOpacity = 0.8,
color = pal4(Wash_prev$positivity),
group = "Positivity by 3-digit zip") %>%
addLayersControl(overlayGroups = c("County HPV vaccination", "IRS tax data by zip", "County Uninsured", "Positivity by 3-digit zip"))
MMM <- MM %>% addResetMapButton() %>%
addLegend(title = "Vaccination rates",
position = "bottomleft",
pal=pal,
values = c(0:45)) %>%
addLegend(title = "Avg annual income (in $1,000s)",
position = "bottomright",
pal=pal2,
values = c(0:150))%>%
addLegend(title = "Percent uninsured",
position = "topleft",
pal=pal3,
values = c(0:15)) %>%
addLegend(title = "Positivity rate",
position = "topright",
pal=pal4,
values = c(0:50))
MMM
MM <- m %>% addPolygons(data = mydf, weight=1, fillOpacity = 0.45,
color = pal(mydf$All),
label = mydf$NAME,
popup = paste0("Percent HPV vaccine UtD: ",
mydf$All, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County HPV vaccination") %>%
addPolygons(data = mydf2, weight=1, fillOpacity = 0.45,
color = pal3(Percent_uninsured$PCTUI_PTnum),
label = mydf2$NAME,
popup = paste0("Percent Uninsured: ",
Percent_uninsured$PCTUI_PTnum, "%"),
labelOptions = labelOptions(textOnly = FALSE),
group = "County Uninsured") %>%
addCircleMarkers(lng = myWashIRS$longitude,
lat = myWashIRS$latitude,
label = myWashIRS$PlaceName,
popup = paste("<b>", myWashIRS$PlaceName,"</b>",
"<br/>",
" AVG ADJUSTED GROSS INCOME (IN THOUSANDS OF DOLLARS)     = $", round(myWashIRS$AdjInc,2),
"<br/>",
"zip = ", myWashIRS$zip),
radius = myWashIRS$AdjInc/10,
stroke = TRUE, fillOpacity = 0.8,
color = pal2(myWashIRS$AdjInc),
group = "IRS tax data by zip",
clusterOptions = markerClusterOptions()) %>%
add_markers(x = Wash_prev$Longitude_avg,
y = Wash_prev$Latitude_avg,
label = Wash_prev$zip3, symbols="square",
popup = paste("<b>", Wash_prev$zip3,"</b>",
"<br/>",
" Positivity rate: ", round(Wash_prev$positivity,2), "%",
"<br/>",
"n screened = ", Wash_prev$n_screened,
"<br/>",
"n positive = ", Wash_prev$n_positive
),
radius = log(Wash_prev$n_positive),
stroke = TRUE, fillOpacity = 0.8,
color = pal4(Wash_prev$positivity),
group = "Positivity by 3-digit zip") %>%
addLayersControl(overlayGroups = c("County HPV vaccination", "IRS tax data by zip", "County Uninsured", "Positivity by 3-digit zip"))
MMM <- MM %>% addResetMapButton() %>%
addLegend(title = "Vaccination rates",
position = "bottomleft",
pal=pal,
values = c(0:45)) %>%
addLegend(title = "Avg annual income (in $1,000s)",
position = "bottomright",
pal=pal2,
values = c(0:150))%>%
addLegend(title = "Percent uninsured",
position = "topleft",
pal=pal3,
values = c(0:15)) %>%
addLegend(title = "Positivity rate",
position = "topright",
pal=pal4,
values = c(0:50))
MMM
